=== Plugin Error Propagation Demo ===

1. TIMEOUT ERROR SCENARIO
--------------------------------------------------
Original user request: 'Search for the latest AI news'
Plugin that failed: brave-search (timeout)

Prompt sent to LLM for error handling:
The user asked: "Search for the latest AI news"

I attempted to invoke the brave-search plugin, but it encountered an error:
{
  "error_type": "timeout",
  "plugin_id": "brave-search",
  "message": "Plugin brave-search processing timed out after 30 seconds.",
  "timeout_duration": 30,
  "suggestion": "This was likely due to the plugin taking too long to respond."
}

You now have several options to handle this error gracefully:
1. Try a different plugin that might fulfill the same purpose
2. Provide a helpful response without the plugin data
3. Explain to the user what went wrong and suggest alternatives
4. If this was a temporary issue (like network timeout), you could suggest they try again

Please respond using the "message" action to provide a user-friendly response that handles this error situation gracefully. Avoid showing technical error details directly to the user unless necessary.

Expected LLM behavior: The LLM should acknowledge the search timeout
and either try alternative approaches or provide a helpful response without the search results.

2. CONNECTION ERROR SCENARIO
--------------------------------------------------
Original user request: 'Read the contents of my notes.txt file'
Plugin that failed: local-fileio (connection error)

Prompt sent to LLM for error handling:
The user asked: "Read the contents of my notes.txt file"

I attempted to invoke the local-fileio plugin, but it encountered an error:
{
  "error_type": "connection_error",
  "plugin_id": "local-fileio",
  "message": "Lost connection to server while processing plugin local-fileio.",
  "suggestion": "This appears to be a connection issue."
}

You now have several options to handle this error gracefully:
1. Try a different plugin that might fulfill the same purpose
2. Provide a helpful response without the plugin data
3. Explain to the user what went wrong and suggest alternatives
4. If this was a temporary issue (like network timeout), you could suggest they try again

Please respond using the "message" action to provide a user-friendly response that handles this error situation gracefully. Avoid showing technical error details directly to the user unless necessary.

Expected LLM behavior: The LLM should explain the connection issue
and suggest the user try again or ask if they need help with something else.

3. GENERAL PLUGIN ERROR SCENARIO
--------------------------------------------------
Original user request: 'Find cases about copyright fair use'
Plugin that failed: courtlistener (invalid API key)

Prompt sent to LLM for error handling:
The user asked: "Find cases about copyright fair use"

I attempted to invoke the courtlistener plugin, but it encountered an error:
{
  "error_type": "plugin_error",
  "plugin_id": "courtlistener",
  "message": "Plugin courtlistener execution failed: Invalid API key",
  "error_details": "Invalid API key",
  "suggestion": "This plugin encountered an unexpected error."
}

You now have several options to handle this error gracefully:
1. Try a different plugin that might fulfill the same purpose
2. Provide a helpful response without the plugin data
3. Explain to the user what went wrong and suggest alternatives
4. If this was a temporary issue (like network timeout), you could suggest they try again

Please respond using the "message" action to provide a user-friendly response that handles this error situation gracefully. Avoid showing technical error details directly to the user unless necessary.

Expected LLM behavior: The LLM should acknowledge the legal database issue
and provide general information about copyright fair use instead.

=== Key Benefits ===
✓ LLM can provide user-friendly error explanations
✓ LLM can try alternative approaches when plugins fail
✓ Users see helpful responses instead of raw technical errors
✓ System gracefully degrades when external services are unavailable
✓ LLM maintains conversational flow even when plugins fail

======================================================================
COMPARISON: Successful Plugin Flow vs Error Handling Flow
======================================================================

SUCCESSFUL PLUGIN FLOW:
------------------------------
User asks: 'What are the latest AI developments?'
→ LLM invokes brave-search plugin
→ Plugin returns successful results
→ LLM receives this prompt:

The user asked: "What are the latest AI developments?"

I invoked the brave-search plugin and received this result:
{
  "results": [
    "New breakthrough in quantum computing achieved by Google",
    "OpenAI releases GPT-5 with enhanced reasoning capabilities",
    "Microsoft announces AI integration across all Office products"
  ],
  "total_results": 3,
  "search_time": 0.85
}

Based on this plugin result and the user's original request, you can now:
1. Call additional plugins if you need more information to fully address the request
2. Provide a comprehensive response to the user using the "message" action

Remember to respond in the required JSON format. If you need more information, invoke another plugin. If you have sufficient information, respond to the user with action "message".

→ LLM uses the results to provide a comprehensive answer

ERROR HANDLING FLOW:
-------------------------
User asks: 'What are the latest AI developments?'
→ LLM invokes brave-search plugin
→ Plugin times out or fails
→ Instead of showing error to user, LLM receives this prompt:

The user asked: "What are the latest AI developments?"

I attempted to invoke the brave-search plugin, but it encountered an error:
{
  "error_type": "timeout",
  "plugin_id": "brave-search",
  "message": "Plugin brave-search processing timed out after 30 seconds.",
  "timeout_duration": 30
}

You now have several options to handle this error gracefully:
1. Try a different plugin that might fulfill the same purpose
2. Provide a helpful response without the plugin data
3. Explain to the user what went wrong and suggest alternatives
4. If this was a temporary issue (like network timeout), you could suggest they try again

Please respond using the "message" action to provide a user-friendly response that handles this error situation gracefully. Avoid showing technical error details directly to the user unless necessary.

→ LLM gracefully handles the error and provides helpful response

RESULT:
• User never sees technical error messages
• LLM maintains helpful, conversational tone
• System provides value even when external services fail

======================================================================
Demo completed! The plugin error propagation system allows
the LLM to handle failures gracefully and maintain a good user experience.
